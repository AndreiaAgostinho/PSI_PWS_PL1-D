<?php 
use ArmoredCore\Controllers\BaseController;
use ArmoredCore\Interfaces\ResourceControllerInterface;
use ArmoredCore\WebObjects\Post;
use ArmoredCore\WebObjects\Redirect;
use ArmoredCore\WebObjects\View;
use Carbon\Carbon;


/**
 * CRUD Resource Controller for ActiveRecord Model flight
 *
 * Code generated by WebLogicMVC Code Builder
 *
 * Date: 2021-06-11
 *
 * WL Code Builder developed by SÃ­lvio Priem Mendes
 * *
 */
class flightController extends BaseController implements ResourceControllerInterface
{
	/**
	 * Returns index view with all records
	 */
	public function index()
	{

		$flights = flight::all();
		return View::make('flight.index', ['flights' => $flights]);
	}


	/**
	 * Returns a view with a form to create a new record
	 */
	public function create()
	{
		return View::make('flight.create');
	}


	/**
	 * Receives new record data through POST method and stores it in the DB table
	 */
	public function store()
	{
		//create new resource (activerecord/model) instance with data from POST
		//your form name fields must match the ones of the table fields
		$partida= array(
			'terminal' => Post::get("terminal"),
			'horarioPartida' => Post::get("horarioPartida"),
			'pista' => Post::get("pista"),
			'airport_id' => Post::get('airport_id')
		);

		$departure = new departure($partida);

		if($departure->is_valid()){
			$departure->save();
		} else {
			Redirect::toRoute('flight/gestao');
		}
		$lastdeparture = departure::last();

		$chegada= array(
			'terminal' => Post::get("terminalC"),
			'horarioChegada' => Post::get("horarioChegada"),
			'pista' => Post::get("pistaC"),
			'airport_id' => Post::get('airport_idC')
		);

		$arrival = new arrival($chegada);

		if($arrival->is_valid()){
			$arrival->save();
		} else {
			Redirect::toRoute('flight/gestao');
		}

		$lastarrival = arrival::last();

		$voo = array(
			'nVoo' => Post::get("nVoo"),
			'distancia' => Post::get("distancia"),
			'comAerea' => Post::get("comAerea"),
			'departure_id' => $lastdeparture->id,
			'arrival_id' => $lastarrival->id,
			'airplane_id' => Post::get("airplane_id")
		);

		$flight= new flight($voo);

		if($flight->is_valid()){
			$flight->save();
			Redirect::toRoute('flight/gestao');
		} else {
		    //redirect to form with data and errors
			Redirect::toRoute('flight/gestao');
		}
	}


	/**
	 * return a detailed view with record where PK = $id
	 */
	public function show($id)
	{
		$flight = flight::find([$id]);

		if (is_null($flight)) {
		   //TODO redirect to standard error page
		} else {
			return View::make('flight.show', ['flight' => $flight]);
		}
	}


	/**
	 * return a editable form view with record where PK = $id
	 */
	public function edit($id)
	{
		$flight = flight::find([$id]);

		if (is_null($flight)) {
		   //TODO redirect to standard error page
		} else {
			return View::make('flight.edit', ['flight' => $flight]);
		}
	}


	/**
	 * Receives record data through POST method and updates it in the DB table
	 */
	public function update($id)
	{
		//find resource (activerecord/model) instance where PK = $id
		//your form name fields must match the ones of the table fields
		$flight = flight::find([$id]);
		$flight->update_attributes(Post::getAll());

		if($flight->is_valid()){
			$flight->save();
			Redirect::toRoute('flight/index');
		} else {
		    //redirect to form with data and errors
			Redirect::flashToRoute('flight/edit', ['flight' => $flight]);
		}
	}


	/**
	 * deletes the record where PK = $id
	 */
	public function destroy($id)
	{
		$flight = flight::find([$id]);
		$departure = departure::find([$flight->departure_id]);
		$arrival = arrival::find([$flight->arrival_id]);



		$flight->delete();
		$departure->delete();
		$arrival->delete();

		Redirect::toRoute('flight/gestao');
	}

	public function search(){

		return View::make('project/voos');
	}

	public function gestao(){

		$flights = flight::all();
		$airplanes = airplane::all();
		$airports = airport::all();
		return View::make('project.gestaovoos', ['flights' => $flights, 'airplanes' => $airplanes,'airports' => $airports]);

	}

	public function find(){

		$post_departure = Post::get("partida");
		$post_arrival = Post::get("chegada");

		if(Post::get("data") != null){
			$post_data = new Carbon(Post::get("data"));
		}

		if(Post::get("datavolta") != null){
			$_SESSION['datavolta'] = Post::get("datavolta");
		}
		else{
			$_SESSION['datavolta'] = null;
		}

		$search_airport_one = airport::find_all_by_cidade([$post_departure]);
		$search_airport_two = airport::find_all_by_cidade([$post_arrival]);


		if(($search_airport_one == null) || ($search_airport_two == null)){
			Redirect::toRoute("home/voos");
		}else{

			foreach($search_airport_one as $airport){
				$departures = departure::find_all_by_airport_id([$airport->id]);
			}
			foreach($search_airport_two as $airport){
				$arrivals = arrival::find_all_by_airport_id([$airport->id]);
			}

			$i = 0;
			$searched_flight = array();
			foreach ($departures as $departure) {
				foreach($arrivals as $arrival){

					$flights = flight::find_all_by_departure_id_and_arrival_id([$departure->id], [$arrival->id]);

					foreach($flights as $flight){
						$datapartida = new Carbon($flight->departure->horariopartida);
						if(Post::get("data") != null){
							if($datapartida->isSameDay($post_data)){
								$searched_flight[$i] = $flight;
								$i++;
							}
						}else{
							$searched_flight[$i] = $flight;
							$i++;
						}
					}
				}
			}

			$i = 0;
			$searched_flight_onestop = array();
			foreach ($departures as $departure) {
				$flight_departures = flight::find_all_by_departure_id([$departure->id]);
				foreach($arrivals as $arrival){
					
					$flight_arrivals = flight::find_all_by_arrival_id([$arrival->id]);

					foreach($flight_departures as $flight_departure){
						foreach($flight_arrivals as $flight_arrival){
							
							$datapartida = new Carbon($flight_departure->departure->horariopartida);

							$date_arrival = new Carbon($flight_departure->arrival->horariochegada);
							$date_departure = new Carbon($flight_arrival->departure->horariopartida);

							if(Post::get("data") != null){
								if($datapartida->isSameDay($post_data)){
									if(($flight_departure->arrival->airport->cidade == $flight_arrival->departure->airport->cidade) && 
										($date_departure->diffInHours($date_arrival, false) <= 4) && 
										($date_departure->isSameDay($date_arrival))){

										$searched_flight_onestop[$i] = $flight_departure;
									$i++;
									$searched_flight_onestop[$i] = $flight_arrival;
									$i++;
								}
							}
						}else{
							if(($flight_departure->arrival->airport->cidade == $flight_arrival->departure->airport->cidade) && 
								($date_departure->diffInHours($date_arrival, false) <= 4) && 
								($date_departure->isSameDay($date_arrival))){

								$searched_flight_onestop[$i] = $flight_departure;
							$i++;
							$searched_flight_onestop[$i] = $flight_arrival;
							$i++;
						}
					}
				}
			}
		}
	}

	$searched_flight_twostop = array();

	$i = 0;
	$allflights = flight::all();
	foreach ($departures as $departure) {
		$flight_departures = flight::find_all_by_departure_id([$departure->id]);
		foreach($arrivals as $arrival){
			
			$flight_arrivals = flight::find_all_by_arrival_id([$arrival->id]);

			foreach($flight_departures as $flight_departure){
				foreach($flight_arrivals as $flight_arrival){
					
					$datapartida = new Carbon($flight_departure->departure->horariopartida);

					$date_arrival = new Carbon($flight_departure->arrival->horariochegada);
					$date_departure = new Carbon($flight_arrival->departure->horariopartida);

					foreach($allflights as $allflight){

						$allflight_arrival = new Carbon($allflight->arrival->horariochegada);
						$allflight_departure = new Carbon($allflight->departure->horariopartida);
						
						if(Post::get("data") != null){
							if($datapartida->isSameDay($post_data)){
								if(($flight_departure->arrival->airport->cidade == $allflight->departure->airport->cidade) && 
									($flight_arrival->departure->airport->cidade == $allflight->arrival->airport->cidade) && 
									($date_arrival->diffInHours($allflight_departure, false) <= 4) && 
									($date_departure->diffInHours($allflight_arrival, false) <= 4) &&
									($date_arrival->isSameDay($allflight_departure)) &&
									($date_departure->isSameDay($allflight_arrival))){


									$searched_flight_twostop[$i] = $flight_departure;
								$i++;

								$searched_flight_twostop[$i] = $allflight;
								$i++;

								$searched_flight_twostop[$i] = $flight_arrival;
								$i++;
							}
						}
					}else{
						if(($flight_departure->arrival->airport->cidade == $allflight->departure->airport->cidade) && 
							($flight_arrival->departure->airport->cidade == $allflight->arrival->airport->cidade) && 
							($date_arrival->diffInHours($allflight_departure, false) <= 4) && 
							($date_departure->diffInHours($allflight_arrival, false) <= 4) &&
							($date_arrival->isSameDay($allflight_departure)) &&
							($date_departure->isSameDay($allflight_arrival))){

							$searched_flight_twostop[$i] = $flight_departure;
						$i++;

						$searched_flight_twostop[$i] = $allflight;
						$i++;

						$searched_flight_twostop[$i] = $flight_arrival;
						$i++;
					}
				}
			}
		}
	}
}

return View::make('project.voos', 
	['searched_flight' => $searched_flight, 'searched_flight_onestop' => $searched_flight_onestop, 'searched_flight_twostop' => $searched_flight_twostop, 'idaevolta' => Post::get('idaevolta')]);
}
}
}

public function volta ($idaflights){

	
	$id = explode(",", $idaflights);
	
	for($i = 0; $i < sizeof($id); $i++){

		$flight = flight::find([$id[$i]]);
		
		if($i == 0){
			$ida_departure = $flight->departure->airport->cidade;
			
		}

		if($i+1 == sizeof($id)){
			$ida_arrival = $flight->arrival->airport->cidade;
		}
	}

	if($_SESSION['datavolta'] != null){
		$post_data_volta = new Carbon($_SESSION['datavolta']);
	}

	$search_airport_one = airport::find_all_by_cidade([$ida_departure]);
	$search_airport_two = airport::find_all_by_cidade([$ida_arrival]);

	$searched_flight_volta = array();
	$searched_flight_onestop_volta = array();
	$searched_flight_twostop_volta = array();

	foreach($search_airport_one as $airport){
		$arrivals = arrival::find_all_by_airport_id([$airport->id]);
	}
	foreach($search_airport_two as $airport){
		$departures = departure::find_all_by_airport_id([$airport->id]);
	}

	$i = 0;
	
	foreach ($departures as $departure) {
		foreach($arrivals as $arrival){

			$flights = flight::find_all_by_departure_id_and_arrival_id([$departure->id], [$arrival->id]);

			foreach($flights as $flight){
				$datapartida = new Carbon($flight->departure->horariopartida);
				if($_SESSION['datavolta'] != null){
					if($datapartida->isSameDay($post_data_volta)){
						$searched_flight_volta[$i] = $flight;
						$i++;
					}
				}else{
					$searched_flight_volta[$i] = $flight;
					$i++;
				}
			}
		}
	}

	$i = 0;
	foreach ($departures as $departure) {
		$flight_departures = flight::find_all_by_departure_id([$departure->id]);
		foreach($arrivals as $arrival){
			
			$flight_arrivals = flight::find_all_by_arrival_id([$arrival->id]);

			foreach($flight_departures as $flight_departure){
				foreach($flight_arrivals as $flight_arrival){
					
					$datapartida = new Carbon($flight_departure->departure->horariopartida);

					$date_arrival = new Carbon($flight_departure->arrival->horariochegada);
					$date_departure = new Carbon($flight_arrival->departure->horariopartida);

					if($_SESSION['datavolta'] != null){
						if($datapartida->isSameDay($post_data_volta)){
							if(($flight_departure->arrival->airport->cidade == $flight_arrival->departure->airport->cidade) && 
								($date_departure->diffInHours($date_arrival, false) <= 4) && 
								($date_departure->isSameDay($date_arrival))){

								$searched_flight_onestop_volta[$i] = $flight_departure;
							$i++;
							$searched_flight_onestop_volta[$i] = $flight_arrival;
							$i++;
						}
					}
				}else{
					if(($flight_departure->arrival->airport->cidade == $flight_arrival->departure->airport->cidade) && 
						($date_departure->diffInHours($date_arrival, false) <= 4) && 
						($date_departure->isSameDay($date_arrival))){

						$searched_flight_onestop_volta[$i] = $flight_departure;
					$i++;
					$searched_flight_onestop_volta[$i] = $flight_arrival;
					$i++;
				}
			}
		}
	}
}
}



$i = 0;
$allflights = flight::all();
foreach ($departures as $departure) {
	$flight_departures = flight::find_all_by_departure_id([$departure->id]);
	foreach($arrivals as $arrival){
		
		$flight_arrivals = flight::find_all_by_arrival_id([$arrival->id]);

		foreach($flight_departures as $flight_departure){
			foreach($flight_arrivals as $flight_arrival){
				
				$datapartida = new Carbon($flight_departure->departure->horariopartida);

				$date_arrival = new Carbon($flight_departure->arrival->horariochegada);
				$date_departure = new Carbon($flight_arrival->departure->horariopartida);

				foreach($allflights as $allflight){

					$allflight_arrival = new Carbon($allflight->arrival->horariochegada);
					$allflight_departure = new Carbon($allflight->departure->horariopartida);
					
					if($_SESSION['datavolta'] != null){
						if($datapartida->isSameDay($post_data_volta)){
							if(($flight_departure->arrival->airport->cidade == $allflight->departure->airport->cidade) && 
								($flight_arrival->departure->airport->cidade == $allflight->arrival->airport->cidade) && 
								($date_arrival->diffInHours($allflight_departure, false) <= 4) && 
								($date_departure->diffInHours($allflight_arrival, false) <= 4) &&
								($date_arrival->isSameDay($allflight_departure)) &&
								($date_departure->isSameDay($allflight_arrival))){


								$searched_flight_twostop_volta[$i] = $flight_departure;
							$i++;

							$searched_flight_twostop_volta[$i] = $allflight;
							$i++;

							$searched_flight_twostop_volta[$i] = $flight_arrival;
							$i++;
						}
					}
				}else{
					if(($flight_departure->arrival->airport->cidade == $allflight->departure->airport->cidade) && 
						($flight_arrival->departure->airport->cidade == $allflight->arrival->airport->cidade) && 
						($date_arrival->diffInHours($allflight_departure, false) <= 4) && 
						($date_departure->diffInHours($allflight_arrival, false) <= 4) &&
						($date_arrival->isSameDay($allflight_departure)) &&
						($date_departure->isSameDay($allflight_arrival))){


						$searched_flight_twostop_volta[$i] = $flight_departure;
					$i++;

					$searched_flight_twostop_volta[$i] = $allflight;
					$i++;

					$searched_flight_twostop_volta[$i] = $flight_arrival;										
					$i++;
				}
			}
		}
	}
}
}
}

return View::make('project.voosvolta', 
	['searched_flight_volta' => $searched_flight_volta, 'searched_flight_onestop_volta' => $searched_flight_onestop_volta, 'searched_flight_twostop_volta' => $searched_flight_twostop_volta, 'ida' => $idaflights]);

}
}

?>